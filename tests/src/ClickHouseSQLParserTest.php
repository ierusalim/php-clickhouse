<?php
namespace ierusalim\ClickHouse;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-08-07 at 10:10:59.
 */
class ClickHouseSQLParserTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ClickHouseSQLParser
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ClickHouseSQLParser;
        //$this->object = new ClickHouseTableType; // use inside as trait
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::typeCanonicName
     * @todo   Implement testTypeCanonicName().
     */
    public function testTypeCanonicName()
    {
        $ch = $this->object;
        $arr = $ch->typeCanonicName();
        $this->assertArrayHasKey('string', $arr);
        foreach ($arr as $lower => $type) {
            if (strtolower($type) !== $lower) {
                $this->assertFalse(1);
            }
            $ans = $ch->typeCanonicName($lower);
            $this->assertEquals($type, $ans);
        }
    }

    /**
     * @return array
     */
    public function typeDefProvider()
    {
        return [
            ['UInt8', [
                'UInt8',    //type
                '',         //default
                'UInt8',    //explicit_type
                '']],       //explicit_default

            ['uint8', [
                'UInt8',
                '',
                'uint8',
                '']],

            ['1', [
                'UInt8',
                '1',
                '',
                '1']],

            ['now()', [
                'DateTime',
                'now()',
                '',
                'now()']],

            ['toString(now())', [
                'String',
                'toString(now())',
                '',
                'toString(now())']],

            ['toInt8(now()', false],

            ['Date now()', [
                'Date',
                'toDate(now())',
                'Date',
                'now()']],

            ['DateTime now()', [
                'DateTime',
                'now()',
                'DateTime',
                'now()']],

            ['x now()', [
                'x',
                'now()',
                'x',
                'now()']],

            ['t d', [
                't',
                'd',
                't',
                'd']],

            ['t default d', [
                't',
                'd',
                't',
                'd']],

            ['uint32 default 1', [
                'UInt32',
                'toUInt32(1)',
                'uint32',
                '1']],

            ['default 1', [
                'UInt8',
                '1',
                '',
                '1']],

            ['uint32 default toUInt16(10)', [
                'UInt32',
                'toUInt32(toUInt16(10))',
                'uint32',
                'toUInt16(10)']],

            ["enum8('a'=1,'b'=2) 'a'", [
                "Enum8('a'=1,'b'=2)",
                "CAST('a' AS Enum8('a'=1,'b'=2))",
                "enum8('a'=1,'b'=2)",
                "'a'"]],

            ["default CAST('a' AS Enum8('a'=1,'b'=2))", [
                "Enum8('a'=1,'b'=2)",
                "CAST('a' AS Enum8('a'=1,'b'=2))",
                "",
                "CAST('a' AS Enum8('a'=1,'b'=2))"]],

            ["[1,2,3,4]", [
                "Array(UInt8)",
                "[1,2,3,4]",
                "",
                "[1,2,3,4]"]],

            ["Nullable(UInt8) [1,2,3,4]", [
                "Nullable(UInt8)",
                "CAST([1,2,3,4] AS Nullable(UInt8))",
                "Nullable(UInt8)",
                "[1,2,3,4]"]],
        ];
    }

    /**
     * @dataProvider typeDefProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::parseTypeDefault
     * @todo   Implement testParseTypeDefault().
     */
    public function testParseTypeDefault($typedef_str, $typedef_arr)
    {
        $ch = $this->object;
        $ans = $ch->parseTypeDefault($typedef_str);
        if (\is_array($ans)) {
            \extract($ans);
            $repack = [$type, $default, $explicit_type, $explicit_default];
            if ($typedef_arr != $repack) {
                print_r($ans);
            }
            $this->assertEquals($typedef_arr, $repack);
        } else {
            if ($typedef_arr === false) {
                $this->assertFalse($ans);
            } else {
                $this->assertFalse(1);
            }
        }
    }

    /**
     * @return types[]
     */
    public function typesPrivider()
    {
        $st = "Int8";
        for ($i=1; $i<10; $i++) {
            $st = 'Array(' . $st .')';
        }
        return [
            [$st, 1, 1],
            ["Nullable(Array(String))", 1, 1],
            ["Nullable(array(String))", 0, 1],
            ["Nullable(array(String)))", 0, 0],
            ['nullable(UInt8)', 0, 1],
            ['UInt8', 1, 1],
            ['UInt16', 1, 1],
            ['UInt32', 1, 1],
            ['UInt64', 1, 1],
            ['UInt128', 0, 0],
            ['float32', 0, 1],
            ['float64', 0, 1],
            ['Int8', 1, 1],
            ['Int16', 1, 1],
            ['Int32', 1, 1],
            ['Int64', 1, 1],
            ['Int128', 0, 0],
            ['fixedString(5)', 0, 1],
            ['FixedString(5)', 1, 1],
            ['Nullable(FixedString(15))', 1, 1],
            ['Nullable(Array(15))', 0, 0],
            ['Nullable(Array(Int8))', 1, 1],
            ['Nullable(Array(Nullable(Int8)))', 0, 0],
            ['Nullable(Array(nullable(Int8)))', 0, 0],
            ['nullable(fixedstrinG(25))', 0, 1],
            ['Array(Int16)', 1, 1],
            ['Array(UInt32)', 1, 1],
            ['nullable(array(fixedstring(5)))', 0, 1],
            ["enum16('google' = 1, 'yandex' = 2)", 0, 1],
            ["enum16('google' - 1, 'yandex' = 2)", 0, 0],
            ["enum8('google' = 1, 'yandex' = 2)", 0, 1],
            ["Enum16('google' = 1, 'yandex' = 2)", 1, 1],
            ["nullable(Enum16('google' = 1, 'yandex' = 2))", 0, 1],
            ["Enum8('google' = 1, 'yandex' = 2)", 1, 1],
            ["enum8('google' = 255, 'yandex' = 256)", 0, 0],
            ["enum8(123 = 255, 'yandex' = 3)", 0, 0],
            ["enum16('google' = 255, 'yandex' = 65536)", 0, 0],
            ["enum32('google' = 255, 'yandex' = 65536)", 0, 0],
            ['NULL', 0, 1],
            ['Nullable(Array(Array(UInt8)))', 1, 1],
            ['Null', 1, 1],
            ['Nullable(Null)', 1, 1],
        ];
    }

    /**
     * @dataProvider typesPrivider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::isClickHouseDataType
     * @todo   Implement testIsClickHouseDataType().
     */
    public function testIsClickHouseDataType($type, $strong_case, $ignore_case)
    {
        $ch = $this->object;
        //echo "$type --> [$strong_case ,";
        $ans = $ch->isClickHouseDataType($type, 0);
        if ($strong_case) {
            $this->assertEquals($type, $ans);
        } else {
            $this->assertFalse($ans);
        }
        //echo " $ignore_case] --> ";
        $ans = $ch->isClickHouseDataType($type, 1);
        if ($ignore_case) {
            $this->assertEquals(strtolower($type), strtolower($ans));
        } else {
            $this->assertFalse($ans);
        }
        //echo "$ans\n";
    }


    /**
     * @return array
     */
    public function expressProvider()
    {
        return [
        ['null', 'Null'],
        [0, 'UInt8'],
        [10, 'UInt8'],
        [100, 'UInt8'],
        [256, 'UInt16'],
        [65535, 'UInt16'],
        [65536, 'UInt32'],
        [4294967295, 'UInt32'],
        [4294967296, 'UInt64'],
        [18446744073709551615, 'UInt64'],
        [18446744073709553700, 'Float64'],
        [-1, 'Int8'],
        [-128, 'Int8'],
        [-129, 'Int16'],
        [-32768, 'Int16'],
        [-32769, 'Int32'],
        [-2147483648, 'Int32'],
        [-2147483649, 'Int64'],
        [-9223372036854775808, 'Int64'],
        [-9223372036854777808, 'Float64'],
        ['[1,2,3]', 'Array(UInt8)'],
        ['[1,256,3]', 'Array(UInt16)'],
        ['[1,-2,3]', 'Array(Int16)'],
        ['[1, 2, 32767]', 'Array(UInt16)'],
        ['[1, 2, 65536]', 'Array(UInt32)'],
        ['[[1],[2],[32768]]', false],
        ['[[1],[2],[240]]', 'Array(Array(UInt8))'],
        ["'x'", 'String'],
        ['x', false],
        ['[]', false],
        ["[']", false],
        ['', false],
        ["[now(),toDateTime(now())]", 'Array(DateTime)'],
        ["toString([toNullable(toFixedString('x',5))])", 'String'],
        ["toNullable(toFixedString('x',5))", 'Nullable(FixedString(5))'],
        ["CAST(vendor_id AS Enum8('1' = 1, '2' = 2))", "Enum8('1' = 1, '2' = 2)"],
        ["CAST(assumeNotNull(x) AS Enum8('yellow' = 1, 'green' = 2)) AS x", "Enum8('yellow' = 1, 'green' = 2)"],
        ["CAST('5','Int8')", "Int8"],
        ["CAST([5] , 'Array(Int8)')", 'Array(Int8)'],
        ["CAST(timestamp, 'FixedString(22)') AS f", 'FixedString(22)'],
        ["CAST(timestamp, 'String') AS string,", 'String'],
        ["CAST(timestamp AS Date) AS date,", 'Date'],
        ["CAST(timestamp AS DateTime) AS datetime,", 'DateTime'],
        ["reinterpretAsString(55)", 'String']
        ];
    }
    /**
     * @dataProvider expressProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::typeDetectFromExpression
     * @todo   Implement testTypeDetectFromExpression().
     */
    public function testTypeDetectFromExpression($expr, $type)
    {
        $ch = $this->object;
        $ans = $ch->typeDetectFromExpression($expr);
        $this->assertEquals($type, $ans);
    }


    /**
     * @return array
     */
    public function arrayProvider()
    {
        return [
            [["'1'", "'2'", "'3'"], 'String'],
            [["'1'", "'2'", 3], false],
            [['now()', 'toDateTime(now())'], 'DateTime'],
            [[1,2,3], 'UInt8'],
            [[], false],
            [[1,2,65535], 'UInt16'],
            [[1,2,65536], 'UInt32'],
            [[1,2,65536], 'UInt32'],
            [[1,4294967295,65536], 'UInt32'],
            [[1,4294967296,65536], 'UInt64'],
            [[1,4294967296,18446744073709551615], 'UInt64'],
            [[1,4294967296,18446744073709555615], 'Float64'],
            [[1, -1, 2], 'Int16'],
            [[-1, 0, -128], 'Int16'],
            [[-1, -1, -124], 'Int8'],
            [[1,-1,-32768], 'Int16'],
            [[1,-1,-32769], 'Int32'],
            [[1,-1,-2147483648], 'Int32'],
            [[1,-1,-2147483649], 'Int64'],
            [[1,65535,-2147483648], 'Int32'],
            [[1,65536,-2147483648], 'Int64'],
        ];
    }

    /**
     * @dataProvider arrayProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::typeDetectFromArray
     * @todo   Implement testTypeDetectFromArray().
     */
    public function testTypeDetectFromArray($arr, $type)
    {
        $ch = $this->object;
        $ans = $ch->typeDetectFromArray($arr);
        $this->assertEquals($type, $ans);
    }

    /**
     * @return array
     */
    public function typeDetectFromFunctionProvider()
    {
        return [
          ['now', false],
          ['now()', 'DateTime'],
          ['toNullable(now())', 'Nullable(DateTime)'],
          ['toNullable(now(),1)', false],
          ['toString(1)', 'String'],
          ["toFixedString('1',2)", 'FixedString(2)'],
          ["toFixedString('1',x)", false],
          ['array(1,2,3)', 'Array(UInt8)'],
          ["array('a','b','1')", 'Array(String)'],
          ["array('a','b', 1)", false],
          ["IPv4NumToString(UInt32(1))", "String"],
          ["emptyArrayUInt8()", "Array(UInt8)"],
          ["toNullable(emptyArrayUInt8())", "Nullable(Array(UInt8))"],
          ["Nullable(emptyArrayUInt8())", false],
          ["Anytextbeforestring()", 'String'],
          ["Anytext()", false],
          ["Cast (1 AS Int8)", 'Int8'],
          ["Cast (1, 'Int8')", 'Int8'],
          ["Cast ([1] as Array(Int8))", 'Array(Int8)'],
          ["Cast ([1] as Nullable(Array(Int8)))", 'Nullable(Array(Int8))'],
          ["Cast ([1] as Nullable(Murray(Int8)))", false],
          ["Cast ([1], 'Array(Int8)')", 'Array(Int8)'],
          ["Cast ([1, 2], 'Array(Int8)')", 'Array(Int8)'],
          ["Cast ([1], [2], 'Array(Int8)')", false],
        ];
    }
    /**
     * @dataProvider typeDetectFromFunctionProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::typeDetectFromFunction
     * @todo   Implement testTypeDetectFromFunction().
     */
    public function testTypeDetectFromFunction($fn, $type)
    {
        $ch = $this->object;
        $this->assertEquals($type, $ch->typeDetectFromFunction($fn));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::staticFnTypes
     * @todo   Implement testStaticFnTypes().
     */
    public function testStaticFnTypes()
    {
        $ch = $this->object;
        $arr = $ch->staticFnTypes();
        $this->assertArrayHasKey('toTypeName', $arr);
        $ans = $ch->staticFnTypes('toTypeName');
        $this->assertEquals('String', $ans);
        $ans = $ch->staticFnTypes('toTypeName', null);
        $this->assertFalse($ans);
        $ans = $ch->staticFnTypes('toTypeName');
        $this->assertFalse($ans);
        $ans = $ch->staticFnTypes('toTypeName', 'String1');
        $this->assertEquals('String1', $ans);
        $ans = $ch->staticFnTypes('toTypeName');
        $this->assertEquals('String1', $ans);
    }


    /**
     * Provider for testParseSqlFunction
     *
     * @return array
     */
    public function parseSqlFunctionProvider()
    {
        return [
            ['x(y)', ['function' => 'x', 'param' => ['y'], 'tail' => '']],
            ['x(a, b, c)', ['function' => 'x', 'param' => ['a', 'b', 'c'], 'tail' => '']],
            ["x('a, b')t,z", ['function' => 'x', 'param' => ["'a, b'"], 'tail' => 't,z']],
            ["nofn", false],
            ["notclose(x", false],
        ];
    }

    /**
     * @dataProvider parseSqlFunctionProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::parseSqlFunction
     * @todo   Implement testParseSqlFunction().
     */
    public function testParseSqlFunction($str, $resarr)
    {
        $ch = $this->object;
        $ans = $ch->parseSqlFunction($str);
        $this->assertEquals($resarr, $ans);
    }

    /**
     * Provider for testDivParts
     *
     * @return array
     */
    public function divPartsProvider()
    {
        return [
            ["a,b,c,d", [['a', 'b', 'c', 'd'], '']],
            ["a,b)c,d", [['a', 'b'], 'c,d']],
            ["(a,b),[c,d],{e,f}", [['(a,b)', '[c,d]', '{e,f}'], '']],
            ["a,(b,c,d),e", [['a', '(b,c,d)', 'e'], '']],
            ["a,(b,c,(d,e),f),(g, h)", [['a', "(b,c,(d,e),f)", '(g, h)'], '']],
            ["a,'b)c,d", false],
            ["", [[],'']],
            [1, [['1'],'']],
            [true, false],
        ];
    }

    /**
     * @dataProvider divPartsProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::divParts
     * @todo   Implement testDivParts().
     */
    public function testDivParts($str, $resarr)
    {
        $ch = $this->object;
        $ans = $ch->divParts($str);
        $this->assertEquals($resarr, $ans);
    }

    /**
     * Provider for testCutNextPart
     *
     * @return array
     */
    public function cutNextProvider()
    {
        return [
            ['abcd', ['abcd', '']],
            ['abcd,ef', ['abcd', 'ef', ',']],
            ["abcd\\,ef,gh,x", ['abcd\\', 'ef,gh,x', ',']],
            ["'abcd\\,ef',gh,x", ["'abcd\\,ef'", 'gh,x', ',']],
            ["abc(def,gh),x", ["abc(def,gh)", 'x', ',']],
            ["abc(def,gh)),x", ["abc(def,gh)", '', ',x']],
            ["[1,2,3],x", ["[1,2,3]", 'x', ',']],
            ["[1,2,3),x", false],
            ["{1,2},[3,4],(5,6),x", ["{1,2}", "[3,4],(5,6),x", ',']],
            ["',x", false],
        ];
    }

    /**
     * @dataProvider cutNextProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::cutNextPart
     * @todo   Implement testCutNextPart().
     */
    public function testCutNextPart($str, $resarr)
    {
        $ch = $this->object;
        $ans = $ch->cutNextPart($str);
        $this->assertEquals($resarr, $ans);
    }

    /**
     * Provider for testTypeConvert
     *
     * @return array
     */
    public function typeConvertProvider()
    {
        return [
            ['UInt8', false, ['toUInt8(', ')']],
            ['UInt8', 99, 'toUInt8(99)'],
            ['Array(UInt8)', '[99]', "CAST([99] AS Array(UInt8))"],
            ['Array(UInt8),', '[99]', false],
            ['Array( UInt8 )', '[99]', false],
            ['Array(UxInt8)', '[99]', false],
            ['Nullable', '[99]', 'toNullable([99])'],
            ['fixedstring(16)', "'99'", "toFixedString('99', 16)"],
            ['array(fixedstring(16))', "['99']", "CAST(['99'] AS Array(FixedString(16)))"],
//            ['array(nullable(fixedstring(16)))', "'99'", "CAST('99' AS Array(Nullable(FixedString(16))))"],
            ['nullable(fixedstring(16))', "'99'", "CAST('99' AS Nullable(FixedString(16)))"],
//            ['array(nullable(uint8))', '[99]', "CAST([99] AS Array(Nullable(UInt8)))"],
            ['nullable(uint8)', '99', "CAST(99 AS Nullable(UInt8))"],
            ['nullable(unknown)', '99', false],
            ['eha(Int8)', '99', false],
            ["enum8('one' = 1, 'two' = 2)", "'one'", "CAST('one' AS Enum8('one' = 1, 'two' = 2))"],
            ["Enum16('one' = 1, 'two' = 2)", "'one'", "CAST('one' AS Enum16('one' = 1, 'two' = 2))"],
        ];
    }

    /**
     * @dataProvider typeConvertProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::typeConvert
     * @todo   Implement testTypeConvert().
     */
    public function testTypeConvert($str, $par, $resarr)
    {
        $ch = $this->object;
        $ans = $ch->typeConvert($str, $par);
        $this->assertEquals($resarr, $ans);
    }

    /**
     * Provider for testTypeConvertIfNeed
     *
     * @return array
     */
    public function typeConvertIfNeedProvider()
    {
        return [
            ['UInt8', '8', 0],
            ['UInt16', '8', 1],
            ['DateTime', 'now()', 0],
            ['Date', 'now()', 1],
            ['Date', 'toDate(now())', 0],
            ['Nullable(Date)', 'toDate(now())', 1],
            ['Nullable(Date)', 'toNullable(toDate(now()))', 0],
            ['String', "'xxx'", 0],
        ];
    }

    /**
     * @dataProvider typeConvertIfNeedProvider
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::typeConvertIfNeed
     * @todo   Implement testTypeConvertIfNeed().
     */
    public function testTypeConvertIfNeed($type, $exp, $do_conv)
    {
        $ch = $this->object;
        $converted = $ch->typeConvertIfNeed($type, $exp);
        if ($do_conv) {
            $this->assertNotEquals($exp, $converted);
        } else {
            $this->assertEquals($exp, $converted);
        }
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSQLParser::parseCreateTableSql
     * @todo   Implement testParseCreateTableSql().
     */
    public function testParseCreateTableSql()
    {
        $ch = $this->object;
        $sql = "CREATE TABLE db.wiki
        (
            li UInt64,
            date toDate(now()),
            path String
        ) ENGINE = MergeTree(date, (path, time), 8192, ver)";
        $arr = $ch->parseCreateTableSql($sql);
        extract($arr);
        $this->assertEquals($create_table, 'CREATE TABLE db.wiki');
        $this->assertEquals($create_fields, ['li UInt64', 'date toDate(now())', 'path String']);
        $this->assertEquals($create_engine, 'ENGINE = MergeTree(date, (path, time), 8192, ver)');
        $this->assertEquals($engine, 'MergeTree');
        $this->assertEquals($engine_param, ['date', '(path, time)', 8192, 'ver']);

        $this->assertEquals('No function', $ch->parseCreateTableSql("No"));

        $arr = $ch->parseCreateTableSql("CRE(X) ENGINE=Log");
        $this->assertEquals($arr['engine'], 'Log');

        $arr = $ch->parseCreateTableSql("CRE(X) BENGINE=Log");
        $this->assertEquals($arr, "Expected 'engine', unexpected 'BENGINE'");

        $arr = $ch->parseCreateTableSql("CRE(X) ENGINE=Log(X");
        $this->assertEquals($arr, "Illegal 'engine' part");
    }
}
