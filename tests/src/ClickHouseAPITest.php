<?php
namespace ierusalim\ClickHouse;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-13 at 13:25:25.
 */
class ClickHouseAPITest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ClickHouseAPI
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ClickHouseAPI;
        $ch = $this->object;
        $this->resetServerUrl();
        $ch->session_autocreate = false;
    }

    public function testConstructEmpty()
    {
        $r = new ClickHouseAPI();
        $this->assertEquals('127.0.0.1', $r->host);
    }
    public function testConstructWithURL()
    {
        $r = new ClickHouseAPI('https://8.8.8.8:1234/');
        $this->assertEquals('8.8.8.8', $r->host);
    }
    public function testConstructWithHostEtc()
    {
        $r = new ClickHouseAPI('1.2.3.4', 5678, 'default', '');
        $this->assertEquals('1.2.3.4', $r->host);
    }

    protected function resetServerUrl()
    {
        $ch = $this->object;

        $localenv = "../localenv.php";
        if (is_file($localenv)) {
            include $localenv;
        } else {
            $clickhouse_url = null;
        }
        $ch->setServerUrl($clickhouse_url);
    }
    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::setServerUrl
     */
    public function testSetServerUrl()
    {
        $ch = $this->object;
        $ch->setServerUrl("https://8.8.8.8:1234/");
        $this->assertEquals($ch->host, '8.8.8.8');
        $this->resetServerUrl();
    }
    public function testSetServerUrlException()
    {
        $ch = $this->object;
        $this->setExpectedException("\Exception");
        $ch->setServerUrl("ftp://8.8.8.8");
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::anyQuery
     * @todo   Implement testAnyQuery().
     */
    public function testAnyQuery()
    {
        $ch = $this->object;

        //get mode
        $ans = $ch->anyQuery("SELECT 123");
        $this->assertTrue(isset($ans['response']));
        $this->assertEquals(trim($ans['response']), 123);

        //post mode
        $ans = $ch->anyQuery("SELECT 123", []);
        $this->assertTrue(isset($ans['response']));
        $this->assertEquals(trim($ans['response']), 123);
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::getQuery
     * @todo   Implement testGetQuery().
     */
    public function testGetQuery()
    {
        $ch = $this->object;
        $ans = $ch->getQuery("SELECT 456");
        $this->assertTrue(isset($ans['response']));
        $this->assertEquals(trim($ans['response']), '456');
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::postQuery
     * @todo   Implement testPostQuery().
     */
    public function testPostQuery()
    {
        $ch = $this->object;
        $ans = $ch->postQuery("CREATE TABLE t (a UInt8) ENGINE = Memory", []);
        if ($ans['code'] == 500) {
            $ans = $ch->postQuery("DROP TABLE t", []);
        }
        $this->assertEquals($ans['code'], 200);
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::doQuery
     * @todo   Implement testDoQuery().
     */
    public function testDoQuery()
    {
        $ch = $this->object;

        $ch->session_autocreate = false;

        // test default query SELECT 1
        $ans = $ch->doQuery();
        $this->assertEquals(\trim($ans['response']), 1);

        $this->assertNull($ch->getSession());

        $ch->session_autocreate = true;
        $ans = $ch->doQuery("SELECT 22");
        $this->assertEquals(\trim($ans['response']), 22);

        $session_id = $ch->getSession();
        if ($ch->isSupported('session_id')) {
            $this->assertEquals(32, strlen($session_id));
        } else {
            $this->assertNull($session_id);
        }

        // test previous query SELECT 22
        $ans = $ch->doQuery();
        $this->assertEquals(\trim($ans['response']), 22);

        if ($ch->isSupported('session_id')) {
            $sess = $ch->getSession();
            $this->assertEquals($sess, $session_id);

            // test temporary session
            $sess_tmp = md5(microtime());
            // use temporary session
            $ans = $ch->doQuery("SELECT 123", false, [], $sess_tmp);

            // session_id must not changed
            $this->assertEquals($session_id, $ch->getSession());

            // but last last_used_session_id must be sess_tmp
            $this->assertEquals($sess_tmp, $ch->last_used_session_id);
        }

        // check query if not supported session
        $ch->support_fe['session_id'] = false;
        $ch->setOption('session_id', 'test');
        $ans = $ch->doQuery("SELECT 321");
        $this->assertEquals(\trim($ans['response']), 321);
        $this->assertNull($ch->getSession());
    }


    /**
     * @covers ierusalim\ClickHouse\ClickHouseAPI::getVersion
     */
    public function testGetVersion()
    {
        $ch = $this->object;
        $version = $ch->getVersion();
        $this->assertTrue(strpos($version, '.') > 0);
        echo "Version of ClickHouse server: $version\n";
        $this->assertEquals($version, $fake_version = $ch->server_version);

        // test get cached version
        $fake_version = $ch->server_version = 'fake_version';
        $this->assertEquals($fake_version, $ch->getVersion());

        $ch->session_autocreate = true;
        // set fake server for emulate session unsupported
        $ch->hook_before_api_call = function($s, $obj) {
            return 'http://google.com/';
        };
        $version = $ch->getVersion(true);
        $this->assertFalse($ch->session_autocreate);
        $this->assertEquals("Unknown", $version);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseAPI::isSupported
     */
    public function testIsSupported()
    {
        $ch = $this->object;
        $sess_sup = $ch->isSupported('session_id');
        echo "Sessions " .($sess_sup ? '':'not ') . "supported\n";

        if (!$ch->isSupported('query', true)) {
            echo "query is not supported!?\n";
        }

        $this->assertNull($ch->isSupported('unknown'));
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::doApiCall
     * @todo   Implement testDoApiCall().
     */
    public function testDoApiCall()
    {
        $ch = $this->object;
        $ch->debug = true;
        $ch->hook_before_api_call = function ($url, $obj) {
            return "https://ierusalim.github.io";
        };

        $file = dirname(dirname(__DIR__)) . DIRECTORY_SEPARATOR . '.gitignore';

        $ans = $ch->doApiCall("empty", [], true, [], $file);
        $this->assertEquals($ans['code'], 405);
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::setOption
     * @todo   Implement testSetOption().
     */
    public function testSetOption()
    {
        $ch = $this->object;
        $ch->setOption('user', 'default');
        $user = $ch->getOption('user');
        $this->assertEquals($user, 'default');
        $user = $ch->setOption('user', null);
        $this->assertFalse(isset($this->options['user']));
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::getOption
     * @todo   Implement testGetOption().
     */
    public function testGetOption()
    {
        $ch = $this->object;
        $noopt = $ch->getOption('noopt');
        $this->assertNull($noopt);
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::setSession
     * @todo   Implement testSetSession().
     */
    public function testSetSession()
    {
         $ch = $this->object;
         $prev_sess_id = $ch->setSession();
         $this->assertNull($prev_sess_id);
         $session_id = $ch->getSession();
         $this->assertEquals(strlen($session_id), 32);
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::getSession
     * @todo   Implement testGetSession().
     */
    public function testGetSession()
    {
         $ch = $this->object;
         $ch->setSession();
         $session_id = $ch->getSession();
         $this->assertEquals($session_id, $ch->getOption('session_id'));
    }

    /**
     * @covers Ierusalim\ClickHouse\ClickHouseAPI::delOption
     * @todo   Implement testDelOption().
     */
    public function testDelOption()
    {
         $ch = $this->object;
         $ch->setSession();
         $session_id = $ch->getSession();
         $this->assertEquals(strlen($session_id), 32);
         $old = $ch->delOption("session_id");
         $this->assertEquals($session_id, $old);
         $new = $ch->getSession();
         $this->assertNull($new);
    }
}
