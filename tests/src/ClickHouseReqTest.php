<?php
namespace ierusalim\ClickHouse;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-13 at 15:20:19.
 */
class ClickHouseReqTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ClickHouseReq
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $localenv = "localenv.php";
        if (is_file($localenv)) {
            include $localenv;
        } else {
            $clickhouse_url = null;
        }
        $this->object = new ClickHouseReq($clickhouse_url);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseReq::queryGood
     * @todo   Implement testQueryGood().
     */
    public function testQueryGood()
    {
        $ch = $this->object;
        $this->assertEquals($ch->queryGood("SELECT 1"), "1");
        $this->assertTrue($ch->queryGood("USE system"));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseReq::queryValue
     * @todo   Implement testQueryValue().
     */
    public function testQueryValue()
    {
        $ch = $this->object;
        $this->assertEquals($ch->queryValue("SELECT 1"), "1");
        $this->assertEquals($ch->queryValue("USE system"), "");

        $this->assertFalse($ch->queryValue("SELECT blablabla()"));
        $this->assertNotEquals(200, $ch->last_code);
        
        $ch->curl_timeout = 2;
        $ch->setServerUrl("http://localhost:22");
        $this->assertFalse($ch->queryValue("SELECT 1"));
        $this->assertTrue(strlen($ch->last_curl_error_str)>10);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseReq::queryFullArray
     * @todo   Implement testQueryFullArray().
     */
    public function testQueryFullArray()
    {
        $ch = $this->object;
        
        $ans = $ch->queryFullArray("SELECT blablabla()");
        $this->assertFalse(is_array($ans));
        
        $ch->setOption('extremes',1);
        $t_arr = $ch->queryFullArray("SELECT * FROM system.settings");
        $this->assertArrayHasKey('meta', $t_arr);
        $this->assertArrayHasKey('data', $t_arr);
        $this->assertArrayHasKey('statistics', $t_arr);
        $this->assertArrayHasKey('rows', $t_arr);

        $t_arr = $ch->queryFullArray("SELECT * FROM system.numbers LIMIT 100", true);
        $this->assertEquals(100,count($t_arr));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseReq::queryArray
     */
    public function testQueryArray()
    {
        $ch = $this->object;
        $arr = $ch->queryArray("SHOW DATABASES", false);
        $this->assertArrayHasKey('name', $arr[0]);
        $arr = $ch->queryArray("SHOW DATABASES", true);
        $this->assertArrayHasKey('0', $arr[0]);
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseReq::queryKeyValues
     */
    public function testQueryKeyValues()
    {
        $ch = $this->object;
        
        $arr = $ch->queryKeyValues("DESCRIBE TABLE system.databases");
        $this->assertArrayHasKey('name', $arr);
        $this->assertArrayHasKey('engine', $arr);
        
        $arr = $ch->queryKeyValues("system.settings", "name, value");
        $this->assertTrue(count($arr)>10);
        
        $err = $ch->queryKeyValues("SELECT blablabla()");
        $this->assertFalse(is_array($err));
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseReq::queryColumn
     */
    public function testQueryColumn()
    {
        $ch = $this->object;
        
        $arr = $ch->queryColumn("SELECT * FROM system.numbers LIMIT 100");
        $this->assertTrue(\count($arr)==100);

        $str = $ch->queryColumn("SELECT * FROM notfoundtable LIMIT 1");
        $this->assertNotEquals(200, $ch->last_code);
    }
}
