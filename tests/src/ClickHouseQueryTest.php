<?php
namespace ierusalim\ClickHouse;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-07-13 at 15:20:19.
 */
class ClickHouseQueryTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ClickHouseQuery
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $localenv = "../localenv.php";
        if (is_file($localenv)) {
            include $localenv;
        } else {
            $clickhouse_url = null;
        }
        $this->object = new ClickHouseQuery($clickhouse_url);
        $this->object->json_compact = true;
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryInsert
     */
    public function testQueryInsert()
    {
        $ch = $this->object;

        $tmp = 'tempcreate';

        $ans = $ch->queryFalse("DROP TABLE IF EXISTS $tmp");
        $this->assertFalse($ans);

        $ans = $ch->queryFalse("CREATE TABLE IF NOT EXISTS $tmp" .
            "( b FixedString(1), dt DEFAULT toDate(now()), " .
            " f DEFAULT toString('abc'), x String )" .
            "ENGINE = MergeTree(dt, (b, dt), 8192)");
        $this->assertFalse($ans);

        $arr = $ch->queryInsert($tmp, ['b', 'x'], ['a', 'hello-a']);
        $this->assertFalse($arr);

        $arr = $ch->queryInsert($tmp, ['b', 'x'], [['b', 'hello-b']]);
        $this->assertFalse($arr);

        $arr = $ch->queryInsert($tmp, ['b', 'x'], [
            ['c', 'hello-c'],
            ['d', 'hello-d']
        ]);
        $this->assertFalse($arr);

        $arr = $ch->queryInsert($tmp, null, ['b'=>'e', 'x'=>'hello-e']);
        $this->assertFalse($arr);

        $arr = $ch->queryInsert($tmp, null, [['b'=>'f', 'x'=>'hello-f']]);
        $this->assertFalse($arr);

        $arr = $ch->queryInsert($tmp, ['b','x','f'], [
            ['b'=>'g', 'x'=>'hello-g'],
            ['b'=>'h', 'x'=>'hello-h'],
            ['b'=>'h', 'x'=>'hello-h', 'f'=>'ahha']
        ]);
        $this->assertFalse($arr);

        $arr = $ch->queryColumnTab("SELECT * FROM $tmp LIMIT 10");
        $this->assertTrue(count($arr)>7);

        // test bad parameters
        $arr = $ch->queryInsert($tmp, ['b', 'x'], []);

        $this->setExpectedException("\Exception");
        $ch->keys = null;
        $arr = $ch->queryInsert($tmp, null, ['x', 'hello-x']);
        $this->assertFalse($arr);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryTrue
     * @todo   Implement testQueryGood().
     */
    public function testQueryGood()
    {
        $ch = $this->object;
        $this->assertEquals($ch->queryTrue("SELECT 1"), "1");
        $this->assertTrue($ch->queryTrue("USE system"));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryFalse
     * @todo   Implement testQueryFalse().
     */
    public function testQueryFalse()
    {
        $ch = $this->object;
        $this->assertFalse($ch->queryFalse("SELECT 1"), "1");
        $this->assertTrue(is_string($ch->queryFalse("SELECT err")));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::bindPars
     * @todo   Implement testBindPars().
     */
    public function testBindPars()
    {
        $ch = $this->object;
        $sql = $ch->bindPars("SELECT {x},{y}", ['x'=>123, 'y'=>"4"]);
        $this->assertEquals("SELECT 123,4", $sql);
        $sql = $ch->bindPars("SELECT {nm} FROM {tb}", ['nm'=>'name', 'tb'=>'table']);
        $this->assertEquals("SELECT name FROM table", $sql);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryValue
     * @todo   Implement testQueryValue().
     */
    public function testQueryValue()
    {
        $ch = $this->object;
        $this->assertEquals($ch->queryValue("SELECT 1"), "1");
        $this->assertEquals($ch->queryValue("USE system"), "");

        $this->assertFalse($ch->queryValue("SELECT blablabla()"));
        $this->assertNotEquals(200, $ch->last_code);

        $ch->curl_timeout = 2;
        $ch->setServerUrl("http://localhost:22");
        $this->assertFalse($ch->queryValue("SELECT 1"));
        $this->assertTrue(strlen($ch->last_curl_error_str)>10);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryFullArray
     * @todo   Implement testQueryFullArray().
     */
    public function testQueryFullArray()
    {
        $ch = $this->object;

        $ans = $ch->queryFullArray("SELECT blablabla()");
        $this->assertFalse(is_array($ans));

        $ch->setOption('extremes', 1);
        $t_arr = $ch->queryFullArray("SELECT * FROM system.settings WITH TOTALS");
        $this->assertArrayHasKey('meta', $t_arr);
        $this->assertArrayHasKey('data', $t_arr);
        $this->assertArrayHasKey('statistics', $t_arr);
        $this->assertArrayHasKey('rows', $t_arr);

        $t_arr = $ch->queryFullArray("SELECT * FROM system.numbers LIMIT 100", true);
        $this->assertEquals(100, count($t_arr));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryArray
     */
    public function testQueryArray()
    {
        $ch = $this->object;
        $arr = $ch->queryArray("SHOW DATABASES", false);
        $this->assertArrayHasKey('name', $arr[0]);
        $arr = $ch->queryArray("SHOW DATABASES", true);
        $this->assertArrayHasKey('0', $arr[0]);
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryArr
     */
    public function testQueryArr()
    {
        $ch = $this->object;
        $this->assertFalse(is_array($ch->queryArr("SELECT blabla()")));
        $ch->setOption("extremes", 1);
        $arr = $ch->queryArr("SELECT * FROM system.settings WITH TOTALS");
        $this->assertArrayHasKey(10, $arr);
        $this->assertEquals(2, count($ch->extremes));
        $this->assertFalse(empty($ch->totals));
        $arr = $ch->queryArr("SELECT * FROM system.settings", true);
        $this->assertArrayHasKey(10, $arr);
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryKeyValues
     */
    public function testQueryKeyValues()
    {
        $ch = $this->object;

        $arr = $ch->queryKeyValues("DESCRIBE TABLE system.databases");
        $this->assertArrayHasKey('name', $arr);
        $this->assertArrayHasKey('engine', $arr);

        $arr = $ch->queryKeyValues("system.settings", "name, value");
        $this->assertTrue(count($arr)>10);

        $err = $ch->queryKeyValues("SELECT blablabla()");
        $this->assertFalse(is_array($err));

        $arr = $ch->queryKeyValues("system.settings", "name");
        $this->assertTrue(count($arr)>10);

        $arr = $ch->queryKeyValues('system.metrics', '*');
        $this->assertTrue(count($arr)>10);
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryKeyValArr
     */
    public function testQueryKeyValArr()
    {
        $ch = $this->object;

        $arr = $ch->queryKeyValArr("DESCRIBE TABLE system.databases");
        $this->assertArrayHasKey('name', $arr);
        $this->assertArrayHasKey('engine', $arr);

        $ch->setOption("extremes", 1);

        $arr = $ch->queryKeyValArr("system.settings", "name, value");
        $this->assertTrue(count($arr)>10);

        $err = $ch->queryKeyValArr("SELECT blablabla()");
        $this->assertFalse(is_array($err));
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryColumnTab
     */
    public function testQueryColumnTab()
    {
        $ch = $this->object;

        $arr = $ch->queryColumnTab("SELECT * FROM system.numbers LIMIT 100");
        $this->assertTrue(\count($arr)==100);

        $str = $ch->queryColumnTab("SELECT * FROM notfoundtable LIMIT 1");
        $this->assertNotEquals(200, $ch->last_code);
    }


    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::quotePar
     */
    public function testQuotePar()
    {
        $ch = $this->object;
        $this->assertEquals(123, $ch->quotePar(123));
        $this->assertEquals("'a'", $ch->quotePar('a'));
        $this->assertEquals('"a"', $ch->quotePar('"a"'));
        $this->assertEquals("'a'", $ch->quotePar("'a'"));
        $this->assertEquals("now()", $ch->quotePar("now()"));
        $str = "test\tttt";
        $this->assertEquals("'test\\tttt'", $ch->quotePar($str));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryTableSubstract
     */
    public function testQueryTableSubstract()
    {
        $ch = $this->object;

        $tbl = "system.columns";
        $arr = $ch->queryTableSubstract($tbl);
        $this->assertArrayHasKey('columns_arr', $arr);
        $arr = $arr['columns_arr'];
        $arr = $ch->queryTableSubstract("notfound'\nthistable");
        $this->assertFalse(\is_array($arr));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseQuery::queryTableSys
     */
    public function testQueryTableSys()
    {
        $ch = $this->object;

        $tbl = "system.columns";
        $arr = $ch->queryTableSys($tbl, 'columns');
        $this->assertEquals($arr, $ch->queryTableSubstract($tbl));
        $arr = $ch->queryTableSys($tbl, 'tables');
        $this->assertEquals($arr, $ch->queryTableSys($tbl));
        $arr = $ch->queryTableSys($tbl, 'replicas');
        $this->assertTrue(is_string($arr));
    }
}
