<?php
namespace ierusalim\ClickHouse;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-08-07 at 12:00:21.
 */
class ClickHouseSessionsTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ClickHouseSessions
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new ClickHouseSessions;
        $this->object = new ClickHouseAPI;// Sessions trait inside;
        $ch = $this->object;
        $this->resetServerUrl();
        $ch->session_autocreate = false;
    }
    protected function resetServerUrl()
    {
        $ch = $this->object;

        $localenv = "../localenv.php";
        if (is_file($localenv)) {
            include $localenv;
        } else {
            $clickhouse_url = null;
        }
        $ch->setServerUrl($clickhouse_url);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSessions::setSession
     * @todo   Implement testSetSession().
     */
    public function testSetSession()
    {
        $ch = $this->object;
        $prev_sess_id = $ch->setSession();
        $this->assertNull($prev_sess_id);
        $session_id = $ch->getSession();
        $this->assertEquals(strlen($session_id), 32);
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSessions::getSession
     * @todo   Implement testGetSession().
     */
    public function testGetSession()
    {
        $ch = $this->object;
        $ch->setSession();
        $session_id = $ch->getSession();
        $this->assertEquals($session_id, $ch->getOption('session_id'));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSessions::setSessionData
     * @todo   Implement testSetSessionData().
     */
    public function testSetSessionData()
    {
        $ch = $this->object;
        $ch->setSession();
        $session_id = $ch->getSession();

        $first_td = 'first test data';
        $second_td = 'second test data';

        // set first data - old data is null
        $this->assertNull($ch->setSessionData($first_td));

        // set second data - old data is first data
        $this->assertEquals($first_td, $ch->setSessionData($second_td));

        // set first data again - old data is second data
        $this->assertEquals($second_td, $ch->setSessionData($first_td));

        // set second data into key 'data2'
        $this->assertNull($ch->setSessionData($second_td, 'data2'));

        // set all session-data as array
        $arr = $ch->setSessionData(['db'=>'test'], false);

        // expected old data
        $exp_arr = ['db' => $ch->default_db_name, 'data' => $first_td, 'data2' => $second_td];
        $this->assertEquals($exp_arr, $arr);

        // set all session-data for non-existing session
        $ans = $ch->setSessionData(['db'=>'test'], false, $session_id . 'x');
        $this->assertFalse($ans);

    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSessions::getSessionData
     * @todo   Implement testGetSessionData().
     */
    public function testGetSessionData()
    {
        $ch = $this->object;
        $ch->setSession();
        $session_id = $ch->getSession();

        // get db-name (default)
        $this->assertEquals($ch->default_db_name, $ch->getSessionData('db'));

        // get non-existent key for existing session
        $this->assertNull($ch->getSessionData('dbxxx'));

        // get array of all session-data
        $arr = $ch->getSessionData(false);
        $this->assertEquals(['db' => $ch->default_db_name], $arr);

        // get data for bad key
        $this->assertFalse($ch->getSessionData(true));

        // get data for non-existent session
        $this->assertFalse($ch->getSessionData('db' , $session_id . 'x'));
    }

    /**
     * @covers ierusalim\ClickHouse\ClickHouseSessions::getCurrentDatabase
     * @todo   Implement testSetCurrentDatabase().
     */
    public function testGetCurrentDatabase()
    {
        $ch = $this->object;

        $ch->setSession();
        $session_id_1 = $ch->setSession();
        $session_id_2 = $ch->getSession();

        $db_1 = $ch->default_db_name;
        $db_2 = 'system';

        $ans = $ch->setCurrentDatabase($db_1, $session_id_1);
        $this->assertFalse($ans);

        $ans = $ch->setCurrentDatabase($db_2, $session_id_2);
        $this->assertFalse($ans);

        $ans = $ch->getCurrentDatabase($session_id_2);
        $this->assertEquals($db_2, $ans);

        $ans = $ch->getCurrentDatabase($session_id_1);
        $this->assertEquals($db_1, $ans);

        $ch->setOption('database', $db_2);
        $this->assertEquals($db_2, $ch->getCurrentDatabase());
        $this->assertEquals($db_2, $ch->getCurrentDatabase(true));
        $ch->setOption('database', null);

        $this->assertEquals($session_id_2, $ch->getSession());

        $this->assertEquals($db_2, $ch->getCurrentDatabase());

        if($ch->isSupported('session_id')) {
            $session_id = \md5(\uniqid(\mt_rand(0, \PHP_INT_MAX), true));
            $db_name = $ch->getCurrentDatabase($session_id);
            $this->assertEquals($ch->default_db_name, $db_name);

            $ch1 = new ClickHouseAPI("http://pastebin.com:80/");
            $this->assertFalse($ch1->getCurrentDatabase($session_id));

            $ch->setSession($session_id_1);
            $db_name = $ch->getCurrentDatabase();
            $this->assertEquals($db_1, $db_name);

            $ch->setSession($session_id_2);
            $db_name = $ch->getCurrentDatabase();
            $this->assertEquals($db_name, $db_2);

            $db_name = $ch->getCurrentDatabase($session_id_1);
            $this->assertEquals($db_name, $db_1);
            $db_name = $ch->getCurrentDatabase($session_id_2);
            $this->assertEquals($db_name, $db_2);
        } else {
            echo '-';
        }
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseSessions::currentDBrequest
     * @todo   Implement testCurrentDBrequest().
     */
    public function testCurrentDBrequest()
    {
        $ch = $this->object;

        $db_1 = $ch->default_db_name;
        $db_2 = 'system';

        $ch->setSession();
        $session_id_1 = $ch->getSession();

        $this->assertEquals($db_1, $ch->currentDBrequest($session_id_1));

        $ch1 = new ClickHouseAPI("http://pastebin.com:80/");

        $this->assertFalse($ch1->currentDBrequest($session_id_1));
    }
    /**
     * @covers ierusalim\ClickHouse\ClickHouseSessions::setCurrentDatabase
     */
    public function testSetCurrentDatabase()
    {
        $ch = $this->object;

        $ch->setSession();
        $session_id_1 = $ch->setSession();
        $session_id_2 = $ch->getSession();

        $db_1 = $ch->default_db_name;
        $db_2 = 'system';

        // default db-name should be retrieved from the cache
        $this->assertFalse($ch->setCurrentDatabase($db_1, $session_id_1));

        // test database-option
        $ch->setCurrentDatabase($db_2, true);
        $this->assertEquals($db_2, $ch->getOption('database'));

        $this->assertEquals($db_2, $ch->getCurrentDatabase());
        $ch->setOption('database', null);

        // test session USE db
        if ($ch->isSupported('session_id')) {
            $ans = $ch->getCurrentDatabase();
            $this->assertEquals($db_1, $ans);

            $this->assertEquals($session_id_2, $ch->getSession());

            $this->assertFalse($ch->setCurrentDatabase($db_2));

            $ans = $ch->getCurrentDatabase();
            $this->assertEquals($db_2, $ans);

            // test set db without session_id - server must return error
            $ch->setSession(null);
            $ans = $ch->setCurrentDatabase($db_2);
            $this->assertTrue(strpos($ans, 'no session')>0);

            // change db for directly specified session
            $ans = $ch->setCurrentDatabase($db_2, $session_id_1);
            $this->assertFalse($ans);

            // curl error emulation
            $ch->hook_before_api_call = function($s, $obj) {
                return 'http://github.com:22/';
            };
            $ans = $ch->setCurrentDatabase($db_1, $session_id_2);
            echo "Results:"; print_r($ans);
        } else {
            echo '-';
        }
    }
}
